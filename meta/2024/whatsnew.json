[{"slug":"ai-server","draft":false,"title":"Introducing AI Server","image":"https://servicestack.net/img/posts/ai-server/ai-server-splash.png","tags":[],"date":"\/Date(1732579200000-0000)\/","content":"We're excited to announce AI Server - an open-source, self-hosted Docker gateway for managing API access \nto various AI services. It offers centralized management of LLMs, Ollama endpoints, media APIs, Comfy UI\nand FFmpeg agents, distributing loads across multiple servers.\n\nIt's initial V1 release comes packed with features, including:\n\n - **Centralized Management**: Manage all your AI services from a single Admin UI\n - **Load Balancing**: Distribute loads across multiple servers\n - **Native Typed Integrations**: For 11 popular programming languages\n - **Synchronous, Queued, and Callback-based APIs**: For different use-cases\n - **Monitoring and Analytics**: Live monitoring, analytics and full history\n - **Protected Access**: With simple API keys","url":"https://servicestack.net/posts/ai-server","wordCount":111,"lineCount":19,"group":"v8.5","order":1},{"slug":"kamal-deployments","draft":false,"title":".NET 8 Templates now using Kamal for deployments","image":"https://servicestack.net/img/posts/kamal-deployments/kamal-splash.png","tags":[],"date":"\/Date(1732579200000-0000)\/","content":"We've updated the built-in GitHub Actions for all Identity Auth templates to use the [Kamal deployment](https://kamal-deploy.org/) tool\nfor customers considering their potential [cloud exit cost savings](https://world.hey.com/dhh/our-cloud-exit-savings-will-now-top-ten-million-over-five-years-c7d9b5bd)\nby exploring the shift in deployment strategy for self-hosting their .NET Docker Apps on their own servers or \nin-expensive cloud providers like [hetzner.com](https://www.hetzner.com) \n\nPreviously, a less streamlined process involving [SSH and Docker Compose](https://docs.servicestack.net/kamal-deploy) was used. \nNow, all Identity Auth templates utilize Kamal, a CLI tool simplifying deployments to any Linux server accessible via SSH.\nKamal automates tasks such as reverse proxy setup and TLS certificate management whilst providing useful \nlocal management tools via Kamal's commands.","url":"https://servicestack.net/posts/kamal-deployments","wordCount":125,"lineCount":16,"group":"v8.5","order":2},{"slug":"apikey-credentials-auth","draft":false,"title":"API Keys Credentials Provider for .NET 8 Microservices","image":"https://servicestack.net/img/posts/apikey-credentials-auth/ai-server-auth-apiexplorer.png","tags":[],"date":"\/Date(1732579200000-0000)\/","content":"The usability of the **Simple Auth with API Keys** story has been significantly improved with the new \n`ApiKeyCredentialsProvider` which enables .NET Microservices to provide persistent UserSession-like \nbehavior using simple API Keys which can be configured together with `AuthSecretAuthProvider` and \n`ApiKeysFeature` to enable a Credentials Auth implementation users can use with their API Keys \nto restrict access to Authorized Users or Admin AuthSecret to protect Admin UIs and APIs.\n\n### Session Auth with API Keys\n\nBehind the scenes this creates a Server Auth Session but instead of maintaining an Authenticated \nUser Session it saves the API Key in the session then attaches the API Key to each request. \nThis makes it possible to make API Key validated requests with just a session cookie instead of \nrequiring resubmission of API Keys for each request.","url":"https://servicestack.net/posts/apikey-credentials-auth","wordCount":143,"lineCount":18,"group":"v8.5","order":4},{"slug":"typed-openai-chat-apis","draft":false,"title":"Typed Open AI Chat & Ollama APIs in 11 Languages","image":"https://servicestack.net/img/posts/ai-server/ai-server-languages.png","tags":[],"date":"\/Date(1732579200000-0000)\/","content":"AI Server's `OpenAiChatCompletion` API - is an OpenAI compatible Chat API with ChatGPT and\nother LLMs like Ollama, the benefit of which allows developers to use its Typed DTOs and ServiceStack\ngeneric Service Clients to call any Open AI Chat compatible API directly, in all of ServiceStack's\n11 supported popular programming languages.\n\nThis allows developers to easily integrate typed access to different LLMs into their applications.\nInstructions are provided for each language demonstrating how to install necessary packages, download DTOs,\nand send API requests.","url":"https://servicestack.net/posts/typed-openai-chat-ollama-apis","wordCount":95,"lineCount":15,"group":"v8.5","order":4},{"slug":"swift-6","draft":false,"title":"ServiceStack.Swift client library rewritten for Swift 6","image":"https://docs.servicestack.net/img/pages/servicestack-reference/swift-logo-banner.jpg","tags":[],"date":"\/Date(1732579200000-0000)\/","content":"All generic service client libraries have been upgraded to support multiple file uploads with API requests \nto take advantage of AI Server APIs that accept file uploads like Image to Image, Speech to Text or its \nFFmpeg Image and Video Transforms.\n\nServiceStack.Swift received the biggest upgrade, which was also rewritten to take advantage of Swift 6 features, \nincluding Swift promises which replaced the previous PromiseKit dependency - making it now dependency-free!","url":"https://servicestack.net/posts/swift6-upgrade","wordCount":86,"lineCount":12,"group":"v8.5","order":5},{"slug":"background-jobs","draft":false,"title":"Execute Background Jobs and Recurring Tasks","image":"https://servicestack.net/img/posts/background-jobs/jobs-dashboard.webp","tags":[],"date":"\/Date(1726012800000-0000)\/","content":"**Background Jobs** is our effortless solution for managing background jobs and \nscheduled tasks in any .NET 8 App, implemented in true ServiceStack fashion where \nit seamlessly integrates into existing ServiceStack Apps with a built-in Management UI \nto provide real-time monitoring, inspection and management of background jobs.\n\nIt packs all useful features we wanted in its initial V1 release, including:\n\n- No infrastructure dependencies\n    - Monthly archivable rolling Databases with full Job Execution History\n- Execute existing **APIs** or **Commands**\n- Schedule **Reoccurring Tasks**\n- Serially execute jobs with **named Workers**\n- Queue Jobs that **Depends On** successful completion of a parent Job\n- Execute **Callback** on successful execution of Job\n- Queue Jobs to **Run After** a specified Date\n- Execute Jobs within the context of an Authenticated User\n- **Auto Retry** and **Timeout** failed jobs on a default or per-job limit\n- Cancellable Jobs\n- Requeue Failed Jobs\n- Maintain Status, Logs and Progress of Executing Jobs\n- Execute transitive (i.e. non-durable) jobs","url":"https://docs.servicestack.net/background-jobs","wordCount":164,"lineCount":28,"group":"v8.4","order":1},{"slug":"sqlite-request-logger","draft":false,"title":"Capture Request Logs in Monthly Rolling SQLite DBs","image":"https://servicestack.net/img/posts/sqlite-request-logs/sqlite-request-logs.webp","tags":[],"date":"\/Date(1726012800000-0000)\/","content":"SQLite's low latency, high-performance and embeddable nature make it ideal for self-managing \nisolated appliance black-box functionality like Request Logging which offers up to \n[35% faster disk performance](https://www.sqlite.org/fasterthanfs.html) than standard file logging.\n\n### Rolling Monthly SQLite Databases\n\nSQLite is unique in its ability to create lightweight databases on-the-fly where Requests \nwill be persisted into isolated Monthly databases which can be easily archived \ninto managed file storage instead of a singular growing database.\n\nSQLite Request Logs also make it easier to generate monthly aggregate reports that provide \nkey insights into the usage of your App.\n\n#### AutoQuery Admin Logging UI\n\nAs SQLite Requests Logs also makes it efficiently possible to sort and filter through logs, \nthe Admin Logging UI has been upgraded to using a fully queryable AutoQueryGrid when using \n`SqliteRequestLogger`","url":"https://docs.servicestack.net/sqlite-request-logs","wordCount":146,"lineCount":24,"group":"v8.4","order":2},{"slug":"scalable-sqlite","draft":false,"title":"Safe, Scalable, High Performance SQLite Apps","image":"https://servicestack.net/img/posts/scalable-sqlite/pvq.webp","tags":[],"date":"\/Date(1726012800000-0000)\/","content":"Ever since adding support for Litestream in ServiceStack project's templates GitHub Action Deployments \nwe've been using SQLite as the backend for our latest new .NET Apps as it's the most cost-effective \noption that frees us from needing to use cloud managed databases and by extension expensive major cloud \nproviders instead of the better value commodity cloud providers.\n\nSQLite is a highly-performant DB that can handle a large number of concurrent read operations and\n35% faster filesystem performance for write operations with next to no latency that's often \nfaster than other RDBMS's courtesy of its proximity to the running application which gives it\nunique advantages over traditional client/server RDBMS's where it's not susceptible to the \n[N+1 Queries problem](https://www.sqlite.org/np1queryprob.html) and is also able to execute your\ncustom C# Logic inside SQL Queries using [Application SQL Functions](https://www.sqlite.org/appfunc.html).\n\nWith [litestream.io](https://litestream.io) taking care of real-time replication to managed storage\nwe just need to workaround SQLite's single concurrent writer to unlock the value, performance and \nunique features of SQLite in our Apps which we cover in this release with integrated support for\nDatabase Locks and Sync Commands.","url":"https://docs.servicestack.net/ormlite/scalable-sqlite","wordCount":200,"lineCount":22,"group":"v8.4","order":3},{"slug":"apikeys","draft":false,"title":"Using API Keys to secure .NET 8 APIs","image":"https://servicestack.net/img/whatsnew/v8.3/bg-security.webp","tags":[],"date":"\/Date(1718582400000-0000)\/","content":"API Keys are a simple and effective way to authorize access to your APIs, which are typically used for machine-to-machine\ncommunication, where a client application needs to access an API without user intervention.\nAPI Keys are often used to control access to specific resources or features in your API, providing a simple way\nto manage access control.\n\n### Redesigning API Keys\n\nBuilding on our experience with API Keys in previous versions of ServiceStack, we've taken the opportunity to redesign\nhow API Keys work to provide a more flexible and powerful way to manage access control for your APIs.\n\nGiven the primary use-case for API Keys is for machine-to-machine communication where the client isn't a User,\nnor do they want systems using their API Keys to have access to their User Account, we've changed\nhow API Keys work in .NET 8.","url":"https://docs.servicestack.net/auth/apikeys","wordCount":150,"lineCount":20,"group":"v8.3","order":1},{"slug":"commands","draft":false,"title":"Use Commands to build robust and observable systems","image":"https://servicestack.net/img/whatsnew/v8.3/commands.png","tags":[],"date":"\/Date(1718582400000-0000)\/","content":"How code-bases are structured is largely a matter of developer preference, however we believe we've also been able to \nadd value in this area with the new appealing managed Commands Feature.\n\n### When to restructure\n\nTimes when you may want to consider moving logic out of your Service include:\n\n- **Code Reuse**: Make it easier to reuse your Service logic in other Services\n- **Complexity**: Break down complex logic into smaller more manageable pieces\n- **Testability**: Make it easier to test your Logic in isolation\n- **Observability**: Make it easier to log and monitor\n- **Robustness**: Make it easier to handle, retry and recover from errors\n- **Flexibility**: Make it easier to run in parallel or in a different managed thread\n\nWe'll look at how the new **Commands Feature** can help in these areas.","url":"https://docs.servicestack.net/commands","wordCount":141,"lineCount":21,"group":"v8.3","order":2},{"slug":"simple-auth","draft":false,"title":"Simple Auth Story for .NET 8 Microservices","image":"https://img.youtube.com/vi/0ceU91ZBhTQ/maxresdefault.jpg","tags":[],"date":"\/Date(1718582400000-0000)\/","content":"With ServiceStack now [fully integrated](/auth/identity-auth) with ASP.NET Identity Auth,\nour latest .NET 8 [Tailwind Templates](/start) offer a full-featured Auth Configuration complete with User Registration,\nLogin, Password Recovery, Two Factory Auth, and more.\n\nWhilst great for Web Applications that need it, it neglects the class of Apps which don't need User Auth and\nthe additional complexity it brings inc. Identity and Password Management, EF Migrations, Token Expirations, OAuth Integrations, etc.\n\nFor these stand-alone Apps, Microservices and Docker Appliances that would still like to restrict Access to their APIs\nbut don't need the complexity of ASP .NET Core's Authentication machinery, a simpler Auth Story would be preferred.\n\nWith the introduction of API Keys in this release we're able to provide a simpler Auth Story for .NET 8 Microservices\nthat's easy for **Admin** Users to manage and control which trusted clients and B2B Integrations can access their functionality.","url":"https://docs.servicestack.net/auth/admin-apikeys","wordCount":159,"lineCount":19,"group":"v8.3","order":3},{"slug":"rhel9-cryptography","draft":false,"title":"Support for RHEL 9's hardened cryptography policy","image":"https://servicestack.net/img/posts/rhel9-cryptography/bg-redhat.webp","tags":[],"date":"\/Date(1718582400000-0000)\/","content":"A consequence of RedHat Enterprise Linux 9's hardened\n[system-wide cryptographic policies](https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/8/html/security_hardening/using-the-system-wide-cryptographic-policies_security-hardening)\nis that it's incompatible with ServiceStack's current licensing which uses RSA encryption and SHA1 hashing algorithm\nto validate license keys.\n\nUnfortunately this makes it no longer possible to use License Keys to run unrestricted ServiceStack Apps on default\ninstalls of RHEL 9 or any of its variants.\n\n### Generate License Key for RHEL 9+\n\nStarting from **ServiceStack v8.3+** Customers can regenerate a new License Key with a stronger **SHA512** Hash Algorithm\nthat's compatible with RHEL 9's default hardened cryptography policy by visiting:\n\n:::{.text-2xl .text-indigo-600}\nhttps://account.servicestack.net/regenerate-license\n:::","url":"https://docs.servicestack.net/rhel9-cryptography","wordCount":110,"lineCount":23,"group":"v8.3","order":4},{"slug":"vue-spa","draft":false,"title":"Enhanced ASP .NET Core SPA Templates","image":"https://servicestack.net/img/whatsnew/v8.2/spa-logos.webp","tags":[],"date":"\/Date(1709510400000-0000)\/","content":"With ServiceStack now fully integrated with .NET 8, our focus has shifted from providing platform-agnostic solutions \nthat supports all ServiceStack's .NET Framework and .NET hosts to building on the new capabilities of .NET 8 by \nenhancing ASP .NET Core's built-in features and templates with ServiceStack's high-productivity features.\n\n### New Vue SPA Template\n\nThe latest Vue SPA template is a good example of this, building on and enhancing the built-in ASP.NET Core Vue SPA \ntemplate with many high-productivity features:\n\n- ASP.NET Core Identity Auth Integration\n- End-to-end Typed TypeScript APIs\n- Beautiful Tailwind CSS with Dark Mode\n- Universal Vite Press Plugin Markdown features\n- Highly Productive Vue Component Library\n- Effortless CRUD and Admin UIs with AutoQueryGrid","url":"https://docs.servicestack.net/releases/v8_02","wordCount":125,"lineCount":21,"group":"v8.2","order":1},{"slug":"react-spa","draft":false,"title":"New ASP.NET Core React SPA Template","image":"https://servicestack.net/img/whatsnew/v8.2/react-spa.png","tags":[],"date":"\/Date(1709510400000-0000)\/","content":"The ASP.NET Core Vite React SPA Template has also been upgraded and enhanced with many high-productivity features including:\n\n- ASP.NET Core Identity Auth Integration\n- End-to-end Typed TypeScript APIs\n- Beautiful Tailwind CSS with Dark Mode\n- Universal Vite Press Plugin Markdown features\n- Integration with shadcn/ui Tailwind React components\n- Native MDX Markdown integration\n- React Router and conventional file system based routing\n- Tailwind Validation bound Input Form Components","url":"https://docs.servicestack.net/releases/v8_02#asp.net-core-react-spa-template","wordCount":80,"lineCount":16,"group":"v8.2","order":2},{"slug":"compose-multiplatform","draft":false,"title":"New Kotlin Compose Multiplaform Template","image":"https://servicestack.net/img/posts/kotlin-compose-multiplatform/compose-multiplatform.webp","tags":[],"date":"\/Date(1709510400000-0000)\/","content":"The last few years of neglect of Xamarin has removed itself from consideration as a viable development option for \ncreating native Mobile and Desktop Apps.\n\nFortunately JetBrains has stepped in to fill the void with its Compose Multiplatform UI Framework offering \na modern declarative alternative reactive for creating native Mobile, Desktop & Web Apps that can also leverage\nKotlin ServiceStack Reference for its end-to-end typed APIs.\n\nWe'll look at the latest Compose Multiplatform [v1.6 Release](https://blog.jetbrains.com/kotlin/2024/02/compose-multiplatform-1-6-0-release/) \nand use it to build a cross-platform Desktop App integrated with a .NET API backend which can both be developed from \nthe same JetBrains Fleet IDE.","url":"https://docs.servicestack.net/releases/v8_02#compose-multiplatform-ios-android-apps","wordCount":115,"lineCount":16,"group":"v8.2","order":3},{"slug":"vite-press-plugin","draft":false,"title":"Vite Press Plugin","image":"https://images.unsplash.com/photo-1524668951403-d44b28200ce0?crop=entropy&fit=crop&h=1000&w=1000","tags":[],"date":"\/Date(1709510400000-0000)\/","content":"The Vite Press Plugin is an alternative to VitePress for adding Markdown features to existing Vite Vue or React projects. \nIt's a non-intrusive plugin for Vue and React Vite apps that want to add markdown powered content features without needing \nto adopt an opinionated framework for their entire App.\n\n### Universal Markdown Features\n\nA goal for vite-press-plugin is to implement a suite of universal markdown-powered features that can be reused across Vue, \nReact and .NET Razor and Blazor projects, allowing you to incorporate same set of markdown feature folders to power \nmarkdown content features across a range of websites built with different technologies.\n\n### Vite Apps with vite-press-plugin\n\nThe vite-press-plugin currently powers the markdown features in the static Vite Vue and React templates which are ideal \nfor creating static websites, blogs, documentation and marketing websites that can be hosted FREE on GitHub Pages CDN","url":"https://docs.servicestack.net/releases/v8_02#vite-press-plugin","wordCount":153,"lineCount":21,"group":"v8.2","order":4},{"slug":"endpoint-routing","draft":false,"title":"Full Integration with ASP.NET Core 8","image":"https://servicestack.net/img/whatsnew/v8.1/aspnet-8.webp","tags":[],"date":"\/Date(1707177600000-0000)\/","content":"We're happy to announce the latest ServiceStack v8.1 release supports deep integration with ASP.NET Core's \nstandardized features for execution of its APIs.\n\nThis reduces friction for integrating ServiceStack into existing .NET 8 Apps, encourages greater knowledge and reuse and \nsimplifies .NET development as developers have fewer concepts to learn and technology implementations \nto configure and maintain that are now applied across their entire .NET App.\n\nBetter yet, this is enabled by default in all of ServiceStack's new \n[Identity Auth .NET 8 templates](https://servicestack.net/start) which now embraces all these standard \nASP.NET Core features:\n\n- [ASP.NET Core Identity Auth](https://docs.servicestack.net/auth/identity-auth)\n- [ASP.NET Core IOC](https://docs.servicestack.net/releases/v8_01#asp.net-core-ioc)\n- [Endpoint Routing](https://docs.servicestack.net/releases/v8_01#endpoint-routing)\n- [System.Text.Json APIs](https://docs.servicestack.net/releases/v8_01#system.text.json)\n- [Open API v3 and Swagger UI](https://docs.servicestack.net/releases/v8_01#openapi-v3)\n- [JWT Identity Auth](https://docs.servicestack.net/releases/v8_01#jwt-identity-auth)","url":"https://docs.servicestack.net/releases/v8_01","wordCount":161,"lineCount":23,"group":"v8.1","order":1},{"slug":"system-json-apis","draft":false,"title":"System.Text.Json APIs","image":"https://servicestack.net/img/whatsnew/v8.1/system-text-json.png","tags":[],"date":"\/Date(1707177600000-0000)\/","content":"ServiceStack Endpoint Routing APIs now utilize **System.Text.Json** - the default high-performance async \nJSON serializer used in .NET Apps for serializing its JSON APIs.\n\n### Enhanced System.Text.Json\n\nServiceStack uses a custom `JsonSerializerOptions` to improve compatibility with existing ServiceStack DTOs and \nServiceStack's rich ecosystem of generic \n[Add ServiceStack Reference Service Clients](https://docs.servicestack.net/add-servicestack-reference), which is configured to:\n\n- Uses `CamelCaseNamingPolicy` for property names\n- Supports Case Insensitive Properties\n- Not serialize `null` properties\n- Serializes `TimeSpan` and `TimeOnly` Data Types with XML Schema Time format\n- Supports `[DataContract]` annotations\n- Supports Custom Enum Serialization","url":"https://docs.servicestack.net/releases/v8_01#system.text.json","wordCount":107,"lineCount":21,"group":"v8.1","order":2},{"slug":"openapi-v3","draft":false,"title":"Swashbuckle OpenAPI v3 and Swagger UI","image":"https://servicestack.net/img/whatsnew/v8.1/openapiv3-logo.png","tags":[],"date":"\/Date(1707177600000-0000)\/","content":"Utilizing the same **ASP.NET Core Endpoints** that the rest of the ASP.NET Core App uses enables your ServiceStack APIs \nto integrate with your wider ASP.NET Core application, opening up more opportunities for reuse of your ServiceStack APIs.\n\nThis opens up the ability to use common third party tooling like the popular `Swashbuckle` package used to to\nenable OpenAPI v3 specification generation of ASP .NET Core APIs which now includes ServiceStack APIs, \ndisplayed along-side Minimal and Web APIs. \n\nWe've created the **ServiceStack.AspNetCore.OpenApi** package to make this integration as easy as possible, which \nincorporates additional information from your ServiceStack APIs into Swagger metadata.","url":"https://docs.servicestack.net/releases/v8_01#openapi-v3","wordCount":118,"lineCount":15,"group":"v8.1","order":3},{"slug":"identity-auth-admin-users-ui","draft":false,"title":"Identity Auth Admin Users UI","image":"https://servicestack.net/img/whatsnew/v8.1/admin-ui-users-edit-custom.png","tags":[],"date":"\/Date(1707177600000-0000)\/","content":"The new Identity Auth Admin UI is an example of value-added features that can benefit all .NET Core App, that \nenables a built-in Admin UI that's only accessible to **Admin** Users for managing Identity Auth\nusers at `/admin-ui/users`.\n\nIt's a highly customizable UI feature that includes standard features to lockout users, change user passwords and manage their roles\nas well as being flexible enough to support Custom `ApplicationUser` Identity Models including:\n\n - Custom Search Results\n - Custom Search Behavior\n - Custom Sort Order\n - Custom Editable Fields\n - Custom User Creation and Validation\n - Admin User Events to run custom logic","url":"https://docs.servicestack.net/releases/v8_01#asp.net-core-identity-auth-admin-ui","wordCount":112,"lineCount":19,"group":"v8.1","order":4}]