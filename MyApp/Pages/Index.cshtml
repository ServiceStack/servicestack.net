@page "/"
@attribute [RenderStatic]
@inject MarkdownBlog Blog
@{
    ViewData["Title"] = "ServiceStack";
}

@section head {
  <link rel="preload" href="/img/pages/index/dashboard.webp" as="image">
  <link rel="preload" href="/img/pages/index/analytics.webp" as="image">
  <link rel="preload" href="/img/pages/index/users.webp" as="image">
  <link rel="preload" href="/img/pages/index/roles.webp" as="image">
  <link rel="preload" href="/img/pages/index/apikeys.webp" as="image">
  <link rel="preload" href="/img/pages/index/logging.webp" as="image">
  <link rel="preload" href="/img/pages/index/profiling.webp" as="image">
  <link rel="preload" href="/img/pages/index/commands.webp" as="image">
  <link rel="preload" href="/img/pages/index/backgroundjobs.webp" as="image">
  <link rel="preload" href="/img/pages/index/validation.webp" as="image">
  <link rel="preload" href="/img/pages/index/database.webp" as="image">
  <link rel="preload" href="/img/pages/index/redis.webp" as="image">
}

<section class="relative isolate overflow-hidden bg-gray-900">
  <svg class="absolute inset-0 -z-10 h-full w-full stroke-white/10 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]" aria-hidden="true">
    <defs>
      <pattern id="983e3e4c-de6d-4c3f-8d64-b9761d1534cc" width="200" height="200" x="50%" y="-1" patternUnits="userSpaceOnUse">
        <path d="M.5 200V.5H200" fill="none" />
      </pattern>
    </defs>
    <svg x="50%" y="-1" class="overflow-visible fill-gray-800/20">
      <path d="M-200 0h201v201h-201Z M600 0h201v201h-201Z M-400 600h201v201h-201Z M200 800h201v201h-201Z" stroke-width="0" />
    </svg>
    <rect width="100%" height="100%" stroke-width="0" fill="url(#983e3e4c-de6d-4c3f-8d64-b9761d1534cc)" />
  </svg>
  <svg viewBox="0 0 1108 632" aria-hidden="true" class="absolute top-10 left-[calc(50%-4rem)] -z-10 w-[69.25rem] max-w-none transform-gpu blur-3xl sm:left-[calc(50%-18rem)] lg:left-48 lg:top-[calc(50%-30rem)] xl:left-[calc(50%-24rem)]">
    <path fill="url(#175c433f-44f6-4d59-93f0-c5c51ad5566d)" fill-opacity=".2" d="M235.233 402.609 57.541 321.573.83 631.05l234.404-228.441 320.018 145.945c-65.036-115.261-134.286-322.756 109.01-230.655C968.382 433.026 1031 651.247 1092.23 459.36c48.98-153.51-34.51-321.107-82.37-385.717L810.952 324.222 648.261.088 235.233 402.609Z" />
    <defs>
      <linearGradient id="175c433f-44f6-4d59-93f0-c5c51ad5566d" x1="1220.59" x2="-85.053" y1="432.766" y2="638.714" gradientUnits="userSpaceOnUse">
        <stop stop-color="#4F46E5" />
        <stop offset="1" stop-color="#80CAFF" />
      </linearGradient>
    </defs>
  </svg>
  <div class="mx-auto max-w-7xl px-6 pt-10 pb-20 lg:flex lg:pt-28 lg:pb-40 lg:px-8">
    <div class="mx-auto max-w-2xl flex-shrink-0 lg:mx-0 lg:max-w-xl lg:pt-8">
     <a href="./"><svg class="h-16 w-16 text-indigo-600" xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 32 32"><path fill="currentColor" d="M10 6c1.544 1.76 2.276 4.15 2.217 6.61c3.968 1.67 9.924 6.12 11.181 12.39H28C26.051 14.31 14.918 6.77 10 6zm-2 7c4.67 4.913.81 11.582-4 12h18.97C21.5 18.289 11.95 13.533 8 13z"/></svg></a>
      <div class="mt-24 sm:mt-32 lg:mt-16">
        <a href="whatsnew" class="inline-flex space-x-6">
          <span class="rounded-full bg-indigo-500/10 dark:bg-indigo-400/10 px-3 py-1 text-sm font-semibold leading-6 text-indigo-400 ring-1 ring-inset ring-indigo-500/20">What's new</span>
          <span class="inline-flex items-center space-x-2 text-sm font-medium leading-6 text-gray-300">
            <span>Just shipped v8.7</span>
            <svg class="h-5 w-5 text-gray-500" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
              <path fill-rule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clip-rule="evenodd" />
            </svg>
          </span>
        </a>
      </div>
      <h1 class="mt-10 text-4xl font-bold tracking-tight text-white sm:text-6xl">Simplicity at Speed</h1>
      <p class="mt-6 text-lg leading-8 text-gray-300">
        One framework to power them all. Write your HTTP APIs once and
        take advantage of end to end typed integrations for all popular Web, Mobile and Desktop platforms.
      </p>
      <div class="mt-8 flex items-center gap-x-6">
        <a href="start" class="rounded-md bg-indigo-500 px-3.5 py-2.5 text-lg text-white shadow-sm hover:bg-indigo-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-400">Get ServiceStack</a>
        <a href="https://docs.servicestack.net/why-servicestack" class="text-sm font-semibold leading-6 text-white">Learn more <span aria-hidden="true">→</span></a>
      </div>
      <div class="mt-24">
        <h2 class="mb-4 text-gray-100 dark:text-gray-800">from the blog:</h2>
        @foreach (var post in Blog.VisiblePosts.OrderByDescending(x => x.Date).Take(2))
        {
            <div class="border-b border-gray-700 pb-4 mb-4">
                <div class="flex justify-between">
                    <div class="w-1/5 flex-grow-0 mr-4">
                        <a href="@Blog.GetPostLink(post)" class="pt-4">
                            <img class="w-full object-cover max-h-[72px]" src="@Blog.GetSplashImage(post)" alt="">
                        </a>
                    </div>
                    <div class="w-4/5">
                        <a href="@Blog.GetPostLink(post)" class="block">
                            <p class="text-lg font-semibold text-gray-50">@post.Title</p>
                            <p class="mt-1 text-sm text-gray-500">@post.Summary</p>
                        </a>
                    </div>
                </div>
            </div>
        }
      </div>
    </div>
    <div class="mx-auto mt-16 flex max-w-2xl sm:mt-24 lg:ml-10 lg:mt-0 lg:mr-0 lg:max-w-none lg:flex-none xl:ml-32">
      <div class="max-w-3xl flex-none sm:max-w-5xl lg:max-w-none">
        <img src="/img/pages/index/dark-and-light-mode.png" alt="App screenshot" width="2432" height="1442" class="w-[76rem] rounded-md bg-white/5 shadow-2xl ring-1 ring-white/10">
      </div>
    </div>
  </div>
  @await Html.PartialAsync("StartLinks")
</section>

@await Html.PartialAsync("PrimaryNav", "./")

<section>
  <div id="key-features" class="bg-white dark:bg-black py-24 sm:py-32">
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <div class="mx-auto max-w-2xl lg:mx-0">
        <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-50 sm:text-4xl">Why ServiceStack?</h2>
        <p class="mt-6 text-lg leading-8 text-gray-600">Simple, versatile, evolvable, resilient high-performance message-based APIs</p>
      </div>
      <div class="relative overflow-hidden pt-16">
        <div class="mx-auto max-w-7xl px-6 lg:px-8">
          <a href="https://youtu.be/Vae0ALalIP0">
            <img src="https://img.youtube.com/vi/Vae0ALalIP0/maxresdefault.jpg" alt="App screenshot" class="mb-[-12%] rounded-xl shadow-2xl ring-1 ring-gray-900/10" width="2432" height="1442">
          </a>
          <div class="relative dark:hidden" aria-hidden="true">
            <div class="absolute -inset-x-20 bottom-0 bg-gradient-to-t from-white pt-[7%]"></div>
          </div>
        </div>
      </div>    
      <dl class="mx-auto mt-16 grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 text-base leading-7 sm:grid-cols-2 lg:mx-0 lg:max-w-none lg:grid-cols-3">
        <div>
          <dt class="font-semibold text-gray-900">Maximize Value and Reach of System APIs</dt>
          <dd class="mt-1 text-gray-600">
            Most features are centered around ServiceStack APIs which has become the most versatile in the world where the same APIs 
            can be consumed from HTTP in a myriad of data formats, via popular MQ Servers whilst supporting 
            new technologies like gRPC without sacrificing any native HTTP integrations.
          </dd>
        </div>

        <div>
          <dt class="font-semibold text-gray-900">Ultimate Developer Productivity</dt>
          <dd class="mt-1 text-gray-600">
            ServiceStack makes it as simple as possible for API Consumers to call your APIs, with native end-to-end 
            typed integrations to 10 of the most popular languages used in creating Web, Mobile & Desktop Apps, 
            that they can easily add/update from within their favorite IDE.
          </dd>
        </div>

        <div>
          <dt class="font-semibold text-gray-900">Remote Services Best Practices</dt>
          <dd class="mt-1 text-gray-600">
            ServiceStack adopts a message-based design that embraces the SOA Integration Remote Facade, DTO and 
            Service Gateway patterns whose uniquely benefits ServiceStack as the only Services framework
            to reuse API contracts enabling optimal end-to-end typed API integrations in .NET Apps without code-gen.
          </dd>
        </div>

        <div>
          <dt class="font-semibold text-gray-900">Benefits of message-based design</dt>
          <dd class="mt-1 text-gray-600">
            Unlike RPC, messages can be evolved, intercepted, routed & serialized with natural decoupling of an APIs coarse-grained DTO contracts allowing front & back-end developers to collaborate on an agreed high-level API design free of detail concerns for their independent implementations.
          </dd>
        </div>

        <div>
          <dt class="font-semibold text-gray-900">Consistent & Simplified Development Model</dt>
          <dd class="mt-1 text-gray-600">
            The benefit afforded by capturing an entire API boundary into impl-free Service Contracts extends to all natively supported languages who only need be concerned with generating declarative DTOs resulting in types encapsulating richer metadata beyond what's possible in other code-gen solutions.
          </dd>
        </div>

        <div>
          <dt class="font-semibold text-gray-900">Preserve Investments</dt>
          <dd class="mt-1 text-gray-600">
            ServiceStack has been consistently promoting the same remote service best-practices for over a decade, whose adoption of its time-tested patterns has survived beyond several abandoned .NET Web Service frameworks during its lifetime with any investments having failed along with them.
          </dd>
        </div>
      </dl>
    </div>
  </div>
</section>

<div id="app">
  <section>
    <div id="native-types" class="bg-white dark:bg-black pb-24 sm:pb-32">
      <div class="mx-auto max-w-7xl px-6 lg:px-8">
        <div class="text-center ">
          <h2 class="mb-8 text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-50 sm:text-4xl">Write once, integrate from anywhere</h2>
        </div>
        <open-ai-chat></open-ai-chat>
      </div>
    </div>
  </section>
  
  <section>
    <div id="analytics" class="bg-white dark:bg-black pb-24 sm:pb-32">
      <div class="mx-auto max-w-7xl px-6 lg:px-8">
        <div class="text-center ">
          <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-gray-50 sm:text-4xl">
            Complete suite of Admin Management UIs in every App
          </h2>
        </div>
      </div>
      <analytics-ui></analytics-ui>
    </div>
  </section>
</div>

@await Html.PartialAsync("HighlightIncludes")
<link rel="stylesheet" href="css/typography.css">

<style>
.hljs, .prose :where(pre):not(:where([class~="not-prose"] *)) .hljs {
  color: #e5e7eb !important;
  background-color: #1e1e2e !important;
}
.hljs-comment, .hljs-quote {
  color: rgb(148 163 184); /*text-slate-400*/
}
</style>
<script type="module">
import { createApp, ref, reactive } from "vue"
import { App, usePageRoutes } from "/js/core.mjs"
import ServiceStackVue from "@@servicestack/vue"
import OpenAiChatLangs from "/mjs/components/OpenAiChatLangs.mjs"


const app = new App()
app.use(ServiceStackVue)
app.component('RouterLink', ServiceStackVue.component('RouterLink'))
//const client = window.client = new JsonServiceClient()
//const events = app.events

let routes = usePageRoutes(app, {
  page:'admin',
  queryKeys: ('tab,provider,db,schema,table,q,page,sort,new,edit,op,skip,id,lang').split(','),
  handlers: {
    init(state) { console.debug('init', state) }, /*debug*/
    nav(state) { console.debug('nav', state) } /*debug*/
  },
})

const OpenAiChat = {
  components: {
    OpenAiChatLangs,
  },
  template: `
    <OpenAiChatLangs baseUrl="https://openai.servicestack.net" :routes="routes">
        <div class="lg:max-w-lg">
          <h2 class="text-base font-semibold leading-7 text-indigo-600">Developer APIs</h2>
          <p class="mt-2 text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl">Open AI Chat</p>
          <p class="mt-6 text-lg leading-8 text-gray-600">
            ServiceStack's end-to-end typed APIs enable you to write your APIs once and take advantage of 
            native typed integrations for all popular languages used in Web, Mobile and Desktop platforms.
          </p>
          <p class="mt-6 text-lg leading-8 text-gray-600">
            Example of calling an 
            <a class="text-indigo-600 hover:text-indigo-800" href="https://docs.servicestack.net/ai-server/openai-chat-all-languages">Open AI compatible Chat API</a>. 
            ServiceStack APIs are executed using the same generic JSON Service Client and the native Typed DTOs generated in each language.
          </p>
          <dl class="mt-10 max-w-xl space-y-4 text-base leading-7 text-gray-600 lg:max-w-none">
            <div class="relative pl-4">
              <dt class="inline font-semibold text-gray-900">
                Smart Generic Clients <span class="px-1" aria-hidden="true">·</span>
              </dt>
              <dd class="inline">
                All languages utilize a feature-rich, idiomatic generic JSON Client that can call 
                any ServiceStack API
              </dd>
            </div>
            <div class="relative pl-4">
              <dt class="inline font-semibold text-gray-900">
                Clean Typed DTOs <span class="px-1" aria-hidden="true">·</span>
              </dt>
              <dd class="inline">
                Native Typed DTOs annotated with API docs utilizing
                available typing features generated for each lang
              </dd>
            </div>
            <div class="relative pl-4">
              <dt class="inline font-semibold text-gray-900">
                Good Development UX <span class="px-1" aria-hidden="true">·</span>
              </dt>
              <dd class="inline">
                Single command to add / update references to remote ServiceStack APIs. Plugins for popular IDEs
              </dd>
            </div>
          </dl>
        </div>            
    </OpenAiChatLangs>`,
  props: {},
  setup() {
    return { routes }
  }
}

const AnalyticsUi = {
  template: `
<div class="py-8">
  <div class="mx-auto max-w-7xl px-6 lg:px-8">
    <div class="mx-auto max-w-2xl text-center">
      <h1 class="text-balance text-4xl font-bold tracking-tight text-gray-900 sm:text-6xl">          
          {{ adminUis[routes.page]?.title || adminUis.analytics.title }}
      </h1>
      <p class="mt-4 text-lg leading-8 text-gray-600">
        {{ adminUis[routes.page]?.summary || adminUis.analytics.summary }}
      </p>
    </div>
    
    <nav class="py-4 flex items-center justify-between px-4 sm:px-0">
      <div class="-mt-px flex w-0 flex-1 select-none">
        <a v-href="{ page:adminUiKeys[adminUiKeys.findIndex(x => x == routes.page) - 1] ?? adminUiKeys[adminUiKeys.length-1] }" class="cursor-pointer inline-flex items-center pr-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700">
          <svg class="mr-3 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
            <path fill-rule="evenodd" d="M18 10a.75.75 0 0 1-.75.75H4.66l2.1 1.95a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 1 1 1.02 1.1l-2.1 1.95h12.59A.75.75 0 0 1 18 10Z" clip-rule="evenodd" />
          </svg>
          Previous
        </a>
      </div>
      <div class="hidden md:-mt-px md:flex select-none">
        <!-- Current: "border-indigo-500 text-indigo-600", Default: "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" -->
        <div>
            <nav class="flex items-center justify-center" aria-label="Progress">
              <ol role="list" class="ml-8 flex items-center space-x-5">
                <li v-for="(label,id,index) in adminUis">
                  <a v-href="{ page:id }" class="block h-2.5 w-2.5 rounded-full bg-gray-200 hover:bg-gray-400">
                    <span class="sr-only">Step 1</span>
                    <span v-if="(routes.page) == id" class="relative block h-2.5 w-2.5 rounded-full bg-indigo-600" aria-hidden="true"></span>
                  </a>
                </li>
              </ol>
            </nav>
        </div>
      </div>
      <div class="-mt-px flex w-0 flex-1 justify-end select-none">
        <a v-href="{ page:adminUiKeys[adminUiKeys.findIndex(x => x == routes.page) + 1] }" class="cursor-pointer inline-flex items-center pl-1 pt-4 text-sm font-medium text-gray-500 hover:border-gray-300 hover:text-gray-700">
          Next
          <svg class="ml-3 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
            <path fill-rule="evenodd" d="M2 10a.75.75 0 0 1 .75-.75h12.59l-2.1-1.95a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.1-1.95H2.75A.75.75 0 0 1 2 10Z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
    </nav>
            
    <div class="mt-8 flow-root select-none">
      <div v-on:click="onNav()" class="cursor-pointer -m-2 rounded-xl bg-gray-900/5 p-2 ring-1 ring-inset ring-gray-900/10 lg:-m-4 lg:rounded-2xl lg:p-4">
        <img :src="'/img/pages/index/'+(routes.page || 'analytics')+'.webp'" alt="Admin UI Screenshot" width="2432" height="1442" class="rounded-md shadow-2xl ring-1 ring-gray-900/10">
      </div>
    </div>
  </div>
</div>  
  `,
  setup() {

    const adminUis = {
      'dashboard': {
        title:'Dashboard',
        summary:'High-level overview stats on number and type of APIs and internal counters',
        href:'https://docs.servicestack.net/admin-ui',
      },
      'analytics': {
        title:'Analytics',
        summary:'Comprehensive In Depth & Interactive API Analytics',
        href:'https://docs.servicestack.net/admin-ui-analytics',
      },
      'users': {
        title:'IdentityAuth Users',
        summary:'Customizable ASP.NET Core Identity Auth User Management',
        href:'https://docs.servicestack.net/admin-ui-identity-users',
      },
      'roles': {
        title:'IdentityAuth Roles',
        summary:'Manage App ASP.NET Core Identity Auth Roles and Claims',
        href:'https://docs.servicestack.net/admin-ui-identity-roles',
      },
      'apikeys': {
        title:'API Keys',
        summary:'Customizable, fine-grain and integrated API Key management',
        href:'https://docs.servicestack.net/auth/apikeys',
      },
      'logging': {
        title:'Request Logging',
        summary:'Rich, detailed, queryable and rolling Request Logs',
        href:'https://docs.servicestack.net/admin-ui-profiling',
      },
      'profiling': {
        title:'Profiling',
        summary:'Observable, Diagnostic Source profiling event viewer',
        href:'https://docs.servicestack.net/admin-ui-profiling',
      },
      'commands': {
        title:'Commands',
        summary:'Use Commands as building blocks for robust and observable systems',
        href:'https://docs.servicestack.net/commands',
      },
      'backgroundjobs': {
        title:'Background Jobs',
        summary:'Effortless management of Background Jobs and Scheduled Tasks',
        href:'https://docs.servicestack.net/background-jobs',
      },
      'validation': {
        title:'DB Validation Rules',
        summary:'Manage dynamic Type and Property Rule Validators',
        href:'https://docs.servicestack.net/admin-ui-validation',
      },
      'database': {
        title:'Database Browser',
        summary:"Browse RDBMS tables of all App's configured databases",
        href:'https://docs.servicestack.net/admin-ui-database',
      },
      'redis': {
        title:'Redis Admin',
        summary:"Inspect, browse and modify the App's configured Redis instance",
        href:'https://docs.servicestack.net/admin-ui-redis',
      },
    }
    const adminUiKeys = Object.keys(adminUis)
    
    function onNav() {
      location.href = adminUis[routes.page]?.href || adminUis.analytics.href
    }

    return {
      routes,
      adminUis,
      adminUiKeys,
      onNav,
    }
  }
}

const Component = {
  components: {
    OpenAiChat,
    AnalyticsUi,
  },
  setup() {
    return {}
  }
}

app.build(Component).mount('#app')
app.start()
</script>

@await Html.PartialAsync("Newsletter")

@await Html.PartialAsync("Testimonials")


@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "ServiceStack APIs",
  Summary = "Effortlessly create feature-rich APIs and Web Apps with ServiceStack",
  Group = "apis"
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Project Templates",
  Summary = "Get Started quickly with your preferred frameworks with our growing project templates",
  Group = "projects",
  LearnMore = "https://docs.servicestack.net/templates-overview",
  Background = "bg-slate-100 dark:bg-slate-800",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Blazor Project Templates",
  Summary = "Beautiful, Modern, Productive Blazor Tailwind Templates",
  Group = "blazor",
  LearnMore = "https://servicestack.net/blazor",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Mobile Apps",
  Summary = "Maximize utility of your APIs with native integrations to all popular languages used in Mobile Apps",
  Group = "mobile",
  LearnMore = "https://docs.servicestack.net/clients-overview", 
  Background = "bg-slate-100 dark:bg-slate-800",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
 Title = "Add ServiceStack Reference",
 Summary = "High performance end-to-end typed APIs that integrate with any platform",
 LearnMore = "https://docs.servicestack.net/add-servicestack-reference", 
 Group = "ss-ref",
})

@await Html.PartialAsync("Home/Languages")

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "gRPC",
  Summary = "ServiceStack’s gRPC support enables a highly productive development environment for developing high-performance gRPC HTTP/2 Services by making ServiceStack’s existing typed Services available from ASP.NET’s gRPC endpoints",
  Group = "grpc",
  LearnMore = "https://docs.servicestack.net/grpc",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Jupyter",
  Summary = "Jupyter is an exciting initiative to support an open standards, interactive computing platform where it provides the ideal integrated exploratory programming environment for data science and scientific computing.",
  Group = "jupyter",
  LearnMore = "https://docs.servicestack.net/jupyter-notebooks",
  Background = "bg-slate-100 dark:bg-slate-800",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "GitHub Actions & Deployments",
  Summary = "Setup your GitHub Actions for your ServiceStack project in minutes with our GitHub Action mix templates to suit a variety of situations.",
  Group = "actions",
  LearnMore = "https://docs.servicestack.net/github-action-templates",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "AI Server",
  Summary = "Unified APIs for LLM APIs, Ollama, ComfyUI & FFmpeg",
  Group = "ai-server",
  LearnMore = "https://servicestack.net/posts/ai-server",
  Background = "bg-slate-100 dark:bg-slate-800",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "Features",
  Summary = "Learn about other exciting features in the ServiceStack software ecosystem",
  Group = "features",
})

@await Html.PartialAsync("VideoGroup", new Shared.VideoGroup {
  Title = "CreatorKit",
  Summary = "Open Source self-hosted alternative to Mailchimp and Disqus",
  Group = "creatorkit",
  LearnMore = "https://servicestack.net/creatorkit/",
  Background = "bg-slate-100 dark:bg-slate-800",
})

@await Html.PartialAsync("Home/Features")

<div class="relative isolate bg-gray-900">
  <div class="mx-auto grid max-w-7xl grid-cols-1 lg:grid-cols-2">
    <div class="relative px-6 pt-24 pb-20 sm:pt-32 lg:static lg:py-48 lg:px-8">
      <div class="mx-auto max-w-xl lg:mx-0 lg:max-w-lg">
        <div class="absolute inset-y-0 left-0 -z-10 w-full overflow-hidden ring-1 ring-white/5 lg:w-1/2">
          <svg class="absolute inset-0 h-full w-full stroke-gray-700 [mask-image:radial-gradient(100%_100%_at_top_right,white,transparent)]" aria-hidden="true">
            <defs>
              <pattern id="54f88622-e7f8-4f1d-aaf9-c2f5e46dd1f2" width="200" height="200" x="100%" y="-1" patternUnits="userSpaceOnUse">
                <path d="M130 200V.5M.5 .5H200" fill="none" />
              </pattern>
            </defs>
            <svg x="100%" y="-1" class="overflow-visible fill-gray-800/20">
              <path d="M-470.5 0h201v201h-201Z" stroke-width="0" />
            </svg>
            <rect width="100%" height="100%" stroke-width="0" fill="url(#54f88622-e7f8-4f1d-aaf9-c2f5e46dd1f2)" />
          </svg>
          <svg class="absolute top-[calc(100%-13rem)] -left-56 w-[72.1875rem] transform-gpu blur-3xl lg:top-[calc(50%-7rem)] lg:left-[max(-14rem,calc(100%-59rem))]" viewBox="0 0 1155 678" aria-hidden="true">
            <path fill="url(#0a9a5302-e517-46c6-85f0-d826aa6a313e)" fill-opacity=".2" d="M317.219 159.025 203.852 0 0 239.659l317.219-80.634 204.172 286.402c1.307-132.337 45.083-346.658 209.733-145.248C936.936 551.942 882.053 772.234 1031.02 636.67c119.18-108.452 130.68-295.338 121.53-375.224L855 379l21.173-362.054-558.954 142.079Z" />
            <defs>
              <linearGradient id="0a9a5302-e517-46c6-85f0-d826aa6a313e" x1="1155.49" x2="-78.208" y1="677.823" y2="203.355" gradientUnits="userSpaceOnUse">
                <stop stop-color="#4F46E5" />
                <stop offset="1" stop-color="#80CAFF" />
              </linearGradient>
            </defs>
          </svg>
        </div>
        <h2 class="text-3xl font-bold tracking-tight text-white">Contact sales</h2>
        <p class="mt-6 text-lg leading-8 text-gray-300">
          If you have any Sales or Licensing questions please 
          <a class="font-semibold text-white" href="mailto:team@servicestack.net">email us</a> 
          and we will do everything we can to take care of you.
        </p>
        <dl class="mt-10 space-y-4 text-base leading-7 text-gray-300">
          <div class="flex gap-x-4">
            <dt class="flex-none">
              <span class="sr-only">Telephone</span>
              <svg class="h-7 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" />
              </svg>
            </dt>
            <dd><a class="hover:text-white" href="mailto:team@servicestack.net">team@servicestack.net</a></dd>
          </div>
        </dl>
      </div>
    </div>
    <div id="contact"></div>
  </div>
</div>


<script type="module">
import { ref } from "vue"
import { ApiResult } from "@@servicestack/client"
import { useClient } from "@@servicestack/vue"
import { SendMessage } from "dtos.mjs"
import { mount } from "app.mjs"

const ContactUs = {
  template:`<form v-if="!api.succeeded" v-on:submit.prevent="submit" method="POST" class="dark px-6 pb-24 pt-20 sm:pb-32 lg:py-48 lg:px-8">
    <div class="mx-auto max-w-xl lg:mr-0 lg:max-w-lg">
      <div class="grid grid-cols-1 gap-y-6 gap-x-8 sm:grid-cols-2">
        <TextInput v-model="request.displayName" id="displayName" label="Name" placeholder="" autocomplete="name" />
        <TextInput v-model="request.email" id="email" placeholder="" autocomplete="email" />
        <TextareaInput v-model="request.body" id="body" label="Message" placeholder="" class="col-span-2" rows="4" />
        <div class="col-span-2 flex justify-end">
            <div class="flex items-center">
                <svg v-if="api.loading" class="w-6 h-6 mr-4 align-middle" width="38" height="38" viewBox="0 0 38 38" xmlns="http://www.w3.org/2000/svg" stroke="#fff">
                    <g fill="none" fill-rule="evenodd">
                        <g transform="translate(1 1)" stroke-width="2">
                            <circle stroke-opacity=".5" cx="18" cy="18" r="18"/>
                            <path d="M36 18c0-9.94-8.06-18-18-18"><animateTransform attributeName="transform" type="rotate" from="0 18 18" to="360 18 18" dur="1s" repeatCount="indefinite"/></path>
                        </g>
                    </g>
                </svg>
                <PrimaryButton :disabled="api.loading">Send Message</PrimaryButton>            
            </div>
        </div>
      </div>
    </div>
  </form>
  <div v-else class="flex">
    <div class="mx-auto grid grid-cols-1">
        <div class="px-6 pt-24 pb-20 sm:pt-32 lg:py-48 lg:px-8">
            <div class="max-w-lg">
                <h2 class="text-3xl font-bold tracking-tight text-white">Thank you for getting in touch!</h2>
                <p class="mt-6 text-lg leading-8 text-gray-300">
                    We appreciate you contacting ServiceStack. <br> 
                    We will get back in touch with you soon!
                </p>
            </div>
        </div>
    </div>
  </div>`,
  setup() {
    const request = ref(new SendMessage())
    const api = ref(new ApiResult())
    const client = useClient()
    async function submit(e) {
      api.value.loading = true
      api.value = await client.apiForm(new SendMessage(), new FormData(e.target))
    }
    return { request, api, submit }
  }
}

mount('#contact', ContactUs)
</script>